View(eq_int_good)
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/main.R', echo=TRUE)
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/main.R', echo=TRUE)
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/main.R', echo=TRUE)
cons_demand_2 <- function(p){
p_1A <- p[1]
p_1B <- p[2]
p_2A <- p[3]
p_2B <- p[4]
# params
beta_0 = 1 # intercept
beta_1 = 1  # price effect
beta_2 = 0 # store effect for store 2
beta_3 = 0 # brand effect for item B
p_A <- p[1]
p_B <- p[2]
odds_1A <- exp(beta_0 - p_A * beta_1)
odds_1B <- exp(beta_0 - p_B * beta_1 + beta_3)
odds_2A <- exp(beta_0 - p_A * beta_1 + beta_2)
odds_2B <- exp(beta_0 - p_B * beta_1 + beta_2 + beta_3)
denom <- 1 + odds_1A + odds_1B + odds_2A + odds_2B
P1A <- odds_1A/denom
P1B <- odds_1B/denom
P2A <- odds_2A/denom
P2B <- odds_2B/denom
return(c(P1A, P1B, P2A, P2B))
}
require(numDeriv)
hessian(func = cons_demand_2, x = c(1,1,1,1))
jacobian(func = cons_demand_2, x = c(1,1,1,1))
cons_demand_2(c(1,1,1,1))
cons_demand_2(c(.5,5,.5,.5))
cons_demand_2(c(.5,.5,.5,.5))
cons_demand_2(c(.1,.2,.3,.4))
cons_demand_2 <- function(p){
p_1A <- p[1]
p_1B <- p[2]
p_2A <- p[3]
p_2B <- p[4]
# params
beta_0 = 1 # intercept
beta_1 = 1  # price effect
beta_2 = 0 # store effect for store 2
beta_3 = 0 # brand effect for item B
odds_1A <- exp(beta_0 - p_1A * beta_1)
odds_1B <- exp(beta_0 - p_1B * beta_1 + beta_3)
odds_2A <- exp(beta_0 - p_2A * beta_1 + beta_2)
odds_2B <- exp(beta_0 - p_2B * beta_1 + beta_2 + beta_3)
denom <- 1 + odds_1A + odds_1B + odds_2A + odds_2B
P1A <- odds_1A/denom
P1B <- odds_1B/denom
P2A <- odds_2A/denom
P2B <- odds_2B/denom
return(c(P1A, P1B, P2A, P2B))
}
cons_demand_2(c(.1,.2,.3,.4))
cons_demand_2(c(1,1,1,1))
jacobian(func = cons_demand_2, x = c(1,1,1,1))
jacobian(func = cons_demand_2, x = c(1,2,3,5))
jacobian(func = cons_demand_2, x = c(1,2,3,4))
jac = jacobian(func = cons_demand_2, x = c(1,2,3,4))
dq_1A = jac[1, 1:4]
dq_1B = jac[2, 1:4]
dq_2A = jac[3, 1:4]
dq_2B = jac[4, 1:4]
objective <- function(p, w){
penalty = 0
p_1 = c(p[1], p[2])
p_2 = c(p[3], p[4])
q = cons_demand_2(p) #q_1A, q_1B, q_2A, q_2B
jac = jacobian(func = cons_demand_2, x = p)
dq_1A = jac[1, 1:4]
dq_1B = jac[2, 1:4]
dq_2A = jac[3, 1:4]
dq_2B = jac[4, 1:4]
# Firm 1 FOC
dpi_1_dp_1A = (q[1] + (p[1] - w[1]) * dq_1A[1]
+ (p[2] - w[2])*dq_1B[1])
dpi_1_dp_1B = (q[2] + (p[2] - w[2]) * dq_1B[2]
+ (p[1] - w[1])*dq_1A[2])
# Firm 2 FOC
dpi_2_dp_2A = (q[3] + (p[3] - w[3]) * dq_2A[3]
+ (p[4] - w[4])*dq_2B[3])
dpi_2_dp_2B = (q[4] + (p[4] - w[4]) * dq_2B[4]
+ (p[3] - w[3])*dq_2A[4])
penalty = sqrt(dpi_1_dp_1A^2 + dpi_1_dp_1B^2 + dpi_2_dp_2A^2 + dpi_2_dp_2B^2)
return(penalty)
}
d_main <- function(w){
p_1A = 1  # prices
p_1B = 1
p_2A = 1
p_2B = 1
p = c(p_1A, p_1B, p_2A, p_2B)
res = optim(
par = p,
fn = objective,
w = w,
method = "BFGS",
control = list(maxit = 10000)
)
out_q <- quantities(res$par[1:2], res$par[3:4])
return(c(res$par, out_q))
}
d_main(c(1,1,1,1))
d_main <- function(w){
p_1A = 1  # prices
p_1B = 1
p_2A = 1
p_2B = 1
p = c(p_1A, p_1B, p_2A, p_2B)
res = optim(
par = p,
fn = objective,
w = w,
method = "BFGS",
control = list(maxit = 10000)
)
out_q <- cons_demand_2(res$par)
return(c(res$par, out_q))
}
d_main(c(1,1,1,1))
p_1A = 1  # prices
p_1B = 1
p_2A = 1
p_2B = 1
p = c(p_1A, p_1B, p_2A, p_2B)
res = optim(
par = p,
fn = objective,
w = w,
method = "BFGS",
control = list(maxit = 10000)
)
res = optim(
par = p,
fn = objective,
w = c(1,1,1,1),
method = "BFGS",
control = list(maxit = 10000)
)
p_1A = 2  # prices
p_1B = 2
p_2A = 2
p_2B = 2
p = c(p_1A, p_1B, p_2A, p_2B)
res = optim(
par = p,
fn = objective,
w = c(1,1,1,1),
method = "BFGS",
control = list(maxit = 10000)
)
View(res)
out_q <- cons_demand_2(res$par)
d_main(c(1,1,1,1))
d_main(c(1,1,1,1))
d_main <- function(w){
p_1A = 2  # prices
p_1B = 2
p_2A = 2
p_2B = 2
p = c(p_1A, p_1B, p_2A, p_2B)
res = optim(
par = p,
fn = objective,
w = w,
method = "BFGS",
control = list(maxit = 10000)
)
out_q <- cons_demand_2(res$par)
return(c(res$par, out_q))
}
d_main(c(1,1,1,1))
d_main <- function(w){
p_1A = 2  # prices
p_1B = 2
p_2A = 2
p_2B = 2
p = c(p_1A, p_1B, p_2A, p_2B)
res = optim(
par = p,
fn = objective,
w = w,
method = "BFGS",
control = list(maxit = 10000)
)
x <- cons_demand_2(res$par)
pi_1 <- x[1] * (p[1] - w[1]) + x[2] * (p[2] - w[2])
pi_2 <- x[3] * (p[3] - w[3]) + x[4] * (p[4] - w[4])
if (firm_1 == 1) {
if (integrated == 0) {
return(-pi_1)
} else if (integrated == 1) {
return(-pi_1 - (w[3] * x[3]))
}
} else {
return(-pi_2)
}
}
d_main(c(1,1,1,1))
firm_1 = 1
integrated = 0
d_main(c(1,1,1,1))
d_main(c(1,1,1,1))
integrated = 1
d_main(c(1,1,1,1))
u_firm_int(c(1,1), c(1,1))
u_firm_unint <- function(w_A, w_B){
# downstream_iter <<- downstream_iter + 1
# downstream price and quantities
pi_p = d_main(c(w_A, w_B))
q <- out_q
pi_A <- w_A[1] * q[1] + w_A[2] * q[3]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_int <- function(w_A, w_B){
# downstream price and quantities
pi_p = d_main(c(w_A, w_B))
q <- out_q
pi_A <- w_A[1] * q[1] + w_A[2] * q[3] + pi_p[2] * q[1] + pi_p[3] * q[2]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_int(c(1,1), c(1,1))
optim_A = 1
u_firm_int(c(1,1), c(1,1))
w_A = c(1,1)
w_B = c(1,1)
# downstream price and quantities
pi_p = d_main(c(w_A, w_B))
d_main <- function(w){
# w is (w_1A, w_2A, w_1B, w_2B)
# x is (x_1A, x_1B, x_2A, x_2B)
p_1A = 2  # prices
p_1B = 2
p_2A = 2
p_2B = 2
p = c(p_1A, p_1B, p_2A, p_2B)
res = optim(
par = p,
fn = objective_d,
w = w,
method = "BFGS",
control = list(maxit = 10000)
)
x <- cons_demand_2(res$par)
out_q <<- x
if (integrated == 0){
pi_1 <- x[1] * (p[1] - w[1]) + x[2] * (p[2] - w[3])
}
if (integrated == 1){
pi_1 <- x[1] * (p[1] - w[1]) + x[2] * (p[2] - w[3]) + w[2] * x[3]
}
pi_2 <- x[3] * (p[3] - w[2]) + x[4] * (p[4] - w[4])
if (firm_1 == 1) {
return(c(pi_1, p))
} else {
return(c(pi_2, p))
}
}
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/Attempt with explicit FOCs/downstream_firms_test.R', echo=TRUE)
u_firm_int <- function(w_A, w_B){
# downstream price and quantities
pi_p = d_main(c(w_A, w_B))
q <- out_q
pi_A <- w_A[1] * q[1] + w_A[2] * q[3] + pi_p[2] * q[1] + pi_p[3] * q[2]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_int(c(1,1), c(1,1))
u_firm_unint(c(1,1), c(1,1))
d_main(c(1,1,1,1))
d_main <- function(w){
# w is (w_1A, w_2A, w_1B, w_2B)
# x is (x_1A, x_1B, x_2A, x_2B)
p_1A = 2  # prices
p_1B = 2
p_2A = 2
p_2B = 2
p = c(p_1A, p_1B, p_2A, p_2B)
res = optim(
par = p,
fn = objective_d,
w = w,
method = "BFGS",
control = list(maxit = 10000)
)
x <- cons_demand_2(res$par)
out_q <<- x
out_p <<- res$par
if (integrated == 0){
pi_1 <- x[1] * (p[1] - w[1]) + x[2] * (p[2] - w[3])
}
if (integrated == 1){
pi_1 <- x[1] * (p[1] - w[1]) + x[2] * (p[2] - w[3]) + w[2] * x[3]
}
pi_2 <- x[3] * (p[3] - w[2]) + x[4] * (p[4] - w[4])
if (firm_1 == 1) {
return(c(pi_1, out_p))
} else {
return(c(pi_2, out_p))
}
}
d_main(c(1,1,1,1))
u_firm_unint(c(1,1), c(1,1), 1)
u_firm_unint <- function(w_A, w_B, optim_A){
# downstream_iter <<- downstream_iter + 1
# downstream price and quantities
p_pi = d_main(c(w_A, w_B))
q <- out_q
pi_A <- w_A[1] * q[1] + w_A[2] * q[3]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_int <- function(w_A, w_B, optim_A){
# downstream price and quantities
p_pi = d_main(c(w_A, w_B))
q <- out_q
pi_A <- w_A[1] * q[1] + w_A[2] * q[3] + p_pi[1] * q[1] + p_pi[2] * q[2]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_unint(c(1,1), c(1,1), 1)
u_firm_int(c(1,1), c(1,1), 1)
u_firm_unint <- function(w_A, w_B, optim_A){
# downstream_iter <<- downstream_iter + 1
# downstream price and quantities
p_pi = d_main(c(w_A, w_B))
q <- out_q
pi_A <- w_A[1] * q[1] + w_A[2] * q[3]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_int <- function(w_A, w_B, optim_A){
# downstream price and quantities
p_pi = d_main(c(w_A, w_B))
q <- out_q
pi_A <- w_A[1] * q[1] + w_A[2] * q[3] + p_pi[5]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_int(c(1,1), c(1,1), 1)
u_firm_int <- function(w_A, w_B, optim_A){
# downstream price and quantities
p_pi = d_main(c(w_A, w_B))
q <- out_q
pi_A <- w_A[1] * q[1] + w_A[2] * q[3] + p_pi[1] * q[1] + p_pi[2] * q[2]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/Attempt with explicit FOCs/downstream_firms_test.R', echo=TRUE)
u_firm_int(c(1,1), c(1,1), 1)
d_main <- function(w){
# w is (w_1A, w_2A, w_1B, w_2B)
# x is (x_1A, x_1B, x_2A, x_2B)
p_1A = 2  # prices
p_1B = 2
p_2A = 2
p_2B = 2
p = c(p_1A, p_1B, p_2A, p_2B)
res = optim(
par = p,
fn = objective_d,
w = w,
method = "BFGS",
control = list(maxit = 10000)
)
x <- cons_demand_2(res$par)
out_q <<- x
out_p <<- res$par
if (integrated == 0){
pi_1 <- x[1] * (p[1] - w[1]) + x[2] * (p[2] - w[3])
}
if (integrated == 1){
pi_1 <- x[1] * (p[1] - w[1]) + x[2] * (p[2] - w[3]) + w[2] * x[3]
}
pi_2 <- x[3] * (p[3] - w[2]) + x[4] * (p[4] - w[4])
print(pi_1)
return(c(out_p, pi_1, pi_2))
}
u_firm_int(c(1,1), c(1,1), 1)
u_firm_unint(c(1,1), c(1,1), 1)
d_main(c(1,1), c(1,1))
d_main(c(1,1, 1,1))
u_firm_int(1, c(1,1), 1)
u_firm_int <- function(w_2A, w_B, optim_A){
# downstream price and quantities
p_pi = d_main(c(0, w_2A, w_B))
q <- out_q
pi_A <- w_A[1] * q[1] + w_A[2] * q[3] + p_pi[1] * q[1] + p_pi[2] * q[2]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_int(1, c(1,1), 1)
u_firm_int <- function(w_2A, w_B, optim_A){
# downstream price and quantities
p_pi = d_main(c(0, w_2A, w_B))
q <- out_q
pi_A <- w_A[2] * q[3] + p_pi[1] * q[1] + p_pi[2] * q[2]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_int <- function(w_2A, w_B, optim_A){
# downstream price and quantities
p_pi = d_main(c(0, w_2A, w_B))
q <- out_q
pi_A <- w_2A * q[3] + p_pi[1] * q[1] + p_pi[2] * q[2]
pi_B <- w_B[1] * q[2] + w_B[2] * q[4]
if (optim_A == 1) {
return(-pi_A)
} else {
return(-pi_B)
}
}
u_firm_int(1, c(1,1), 1)
u_firm_unint(c(1,1), c(1,1), 1)
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/Attempt with explicit FOCs/upstream_firms_test.R', echo=TRUE)
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/Attempt with explicit FOCs/downstream_firms_test.R', echo=TRUE)
u_firm_unint(c(1,1), c(1,1), 1)
u_firm_int(1, c(1,1), 1)
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/Attempt with explicit FOCs/consumer_logit_test.R', echo=TRUE)
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/Attempt with explicit FOCs/downstream_firms_test.R', echo=TRUE)
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/Attempt with explicit FOCs/upstream_firms_test.R', echo=TRUE)
integrated = 0
optim_A = 1
u_firm_unint(c(1,1), c(1,1), 1)
w_A = (1,1)
w_B = (1,1)
w_A = c(1,1)
w_B = c(1,1)
dpi_dwA <- grad(func = u_firm_unint, x = w_A, w_B = w_B, optim_A = 1)
dpi_dwB <- grad(func = u_firm_unint, x = w_B, w_A = w_A, optim_A = 0)
dpi_dwA^2
#####################################################################
# 1. Preliminaries
#####################################################################
require(numDeriv)
setwd("G:\\My Drive\\Ivan\\College\\2018-2019\\Indep Study\\R Code\\Attempt with explicit FOCs")
source("upstream_firms_test.R")
source("downstream_firms_test.R")
source("consumer_logit_test.R")
objective_m <- function(w){
w_A = c(w[1], w[2])
w_B = c(w[3], w[4])
dpi_dwA <- grad(func = u_firm_unint, x = w_A, w_B = w_B, optim_A = 1)
dpi_dwB <- grad(func = u_firm_unint, x = w_B, w_A = w_A, optim_A = 0)
return(sqrt(dpi_dwA^2 + dpi_dwB^2))
}
optim(par = c(1,1,1,1), fn = objective_m)
optim(par = c(1,1,1,1), fn = objective_m, method = "BFGS")
res <- optim(par = c(1,1,1,1), fn = objective_m, method = "BFGS")
objective_m <- function(w){
w_A = c(w[1], w[2])
w_B = c(w[3], w[4])
dpi_dwA <- grad(func = u_firm_unint, x = w_A, w_B = w_B, optim_A = 1)
dpi_dwB <- grad(func = u_firm_unint, x = w_B, w_A = w_A, optim_A = 0)
return(sqrt(sum(dpi_dwA^2, dpi_dwB^2)))
}
res <- optim(par = c(1,1,1,1), fn = objective_m, method = "BFGS")
objective_m <- function(w){
w_A = c(w[1], w[2])
w_B = c(w[3], w[4])
dpi_dwA <- grad(func = u_firm_unint, x = w_A, w_B = w_B, optim_A = 1)
dpi_dwB <- grad(func = u_firm_unint, x = w_B, w_A = w_A, optim_A = 0)
return(sqrt(sum(dpi_dwA^2, dpi_dwB^2)))
}
res <- optim(par = c(1,1,1,1), fn = objective_m, method = "BFGS", control = list(maxit = 100))
source('G:/My Drive/Ivan/College/2018-2019/Indep Study/R Code/Attempt with explicit FOCs/main_test.R', echo=TRUE)
res <- optim(par = c(1,1,1,1), fn = objective_m, method = "BFGS", control = list(maxit = 1))
res
